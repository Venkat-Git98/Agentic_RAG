export const simpleFlowNodes = [
  { id: 'user_query', type: 'input', data: { label: 'User Query', description: '**Purpose:** The starting point and primary input for the entire workflow.\n\n**Function:** This represents the user\'s question or problem. The complexity and nature of this query determine the specific path the system takes, dictating which agents are activated and in what order.' }, position: { x: 250, y: 0 }, sourcePosition: 'bottom', targetPosition: 'top' },
  { id: 'triage', type: 'default', data: { label: 'TriageAgent', description: '**Purpose:** To act as the intelligent "front door" and router for the system.\n\n**Function:** It receives the initial `User Query` and analyzes it to determine the most efficient resolution path. It checks for previously cached answers and classifies the query\'s intent before routing it to the appropriate downstream agent (`ContextualAnsweringAgent`, `PlanningAgent`, or `HydeAgent`).' }, position: { x: 250, y: 100 }, sourcePosition: 'bottom', targetPosition: 'top' },
  { id: 'contextual', type: 'default', data: { label: 'ContextualAnsweringAgent', description: '**Purpose:** To provide rapid answers to simple, follow-up questions.\n\n**Function:** This agent is a "fast path" specialist. If the `TriageAgent` determines the query is a direct clarification of the previous turn, this agent uses the recent conversation history (from Redis) to generate an answer without initiating a full research workflow.' }, position: { x: 50, y: 200 }, sourcePosition: 'bottom', targetPosition: 'top' },
  { id: 'planning', type: 'default', data: { label: 'PlanningAgent', description: '**Purpose:** To create a structured, step-by-step research plan for complex queries.\n\n**Function:** This agent acts as the project manager for research. It deconstructs a single complex query into a series of smaller, targeted sub-queries. It also analyzes the query to detect if it requires mathematical steps, flagging it for the `Calculation Agent` path later on.' }, position: { x: 250, y: 200 }, sourcePosition: 'bottom', targetPosition: 'top' },
  { id: 'hyde', type: 'default', data: { label: 'HydeAgent', description: '**Purpose:** To enhance the accuracy of the information retrieval process.\n\n**Function:** (Hyde: Hypothetical Document Embeddings). For each sub-query in the research plan, this agent generates a short, idealized answer. This document isn\'t shown to the user; instead, it\'s used by the `ResearchOrchestrator` to more accurately find relevant information from the **Neo4j** knowledge base.' }, position: { x: 450, y: 200 }, sourcePosition: 'bottom', targetPosition: 'top' },
  { id: 'research', type: 'default', data: { label: 'ResearchOrchestrator', description: '**Purpose:** To manage and execute the entire research plan by retrieving all necessary information.\n\n**Function:** This is the core research engine of the system. It takes the plan from the `PlanningAgent` and executes all sub-queries in parallel for speed. For each sub-query, it retrieves information from the **Neo4j** database and leverages the **Reranker** to ensure data quality before passing the results to the next stage.' }, position: { x: 250, y: 300 }, sourcePosition: 'bottom', targetPosition: 'top' },
  { id: 'reranker', type: 'default', data: { label: 'Reranker', description: '**Purpose:** To improve the quality and relevance of information found during research.\n\n**Function:** This component is a specialized tool used by the `ResearchOrchestrator`. After retrieving a set of potential information from sources like Neo4j, the `Reranker` re-evaluates and re-orders this data, pushing the most relevant content to the top to ensure the final answer is based on the best possible information.' }, position: { x: 50, y: 400 }, sourcePosition: 'bottom', targetPosition: 'top' },
  { id: 'calculation', type: 'default', data: { label: 'Calculation Agent', description: '**Purpose:** To handle queries that require step-by-step mathematical reasoning.\n\n**Function:** This is not a separate agent but a *specialized processing path* within the `SynthesisAgent`. When a query has been flagged for calculation by the `PlanningAgent`, the `SynthesisAgent` uses a unique, more structured method to generate the final answer, ensuring that mathematical steps and formulas are explained clearly and accurately.' }, position: { x: 250, y: 400 }, sourcePosition: 'bottom', targetPosition: 'top' },
  { id: 'synthesis', type: 'default', data: { label: 'SynthesisAgent', description: '**Purpose:** To transform the raw, verified research data into a single, coherent final answer.\n\n**Function:** This agent receives all the validated information from the `ResearchOrchestrator`. It acts as the final author, weaving the disparate pieces of information together to generate the comprehensive response that the user will read.' }, position: { x: 250, y: 500 }, sourcePosition: 'bottom', targetPosition: 'top' },
  { id: 'memory', type: 'default', data: { label: 'MemoryAgent', description: '**Purpose:** To ensure the system has a persistent memory of its interactions for caching and context.\n\n**Function:** This agent interacts directly with the **Redis** data store for two key functions:\n1.  It saves high-quality, final answers to the **Prompt Caching** store for fast retrieval later.\n2.  It updates the user\'s short-term conversation history in **Redis**, enabling contextual follow-ups.' }, position: { x: 250, y: 600 }, sourcePosition: 'bottom', targetPosition: 'top' },
  { id: 'prompt_caching', type: 'output', data: { label: 'Prompt Caching', description: 'This high-speed data store serves two roles. As **Redis**, it holds the short-term session history for contextual conversations. As **Prompt Caching**, it stores the final answers to common questions, allowing the `TriageAgent` to provide them instantly.' }, position: { x: 50, y: 700 }, sourcePosition: 'bottom', targetPosition: 'top' },
  { id: 'neo4j', type: 'output', data: { label: 'Neo4j', description: "This graph database is the system's long-term brain. It stores the core technical knowledge and the complex relationships between data points, allowing for sophisticated and context-aware queries during the research phase." }, position: { x: 450, y: 400 }, sourcePosition: 'bottom', targetPosition: 'top' },
  { id: 'user_query_answer', type: 'output', data: { label: 'User Query Answer', description: 'The final, synthesized answer that is presented to the user.' }, position: { x: 250, y: 800 }, sourcePosition: 'bottom', targetPosition: 'top' },
];

export const simpleFlowEdges = [
  { id: 'e-uq-1', source: 'user_query', target: 'triage', animated: true },
  { id: 'e1-2', source: 'triage', target: 'planning', animated: true },
  { id: 'e1-3', source: 'triage', target: 'contextual', animated: true },
  { id: 'e1-4', source: 'triage', target: 'hyde', animated: true },
  { id: 'e2-5', source: 'planning', target: 'research' },
  { id: 'e4-5', source: 'hyde', target: 'research' },
  { id: 'e5-rerank', source: 'research', target: 'reranker' },
  { id: 'e-rerank-5', source: 'reranker', target: 'research' },
  { id: 'e5-calc', source: 'research', target: 'calculation' },
  { id: 'e-calc-6', source: 'calculation', target: 'synthesis' },
  { id: 'e5-6', source: 'research', target: 'synthesis' },
  { id: 'e6-7', source: 'synthesis', target: 'memory' },
  { id: 'e6-pc', source: 'synthesis', target: 'prompt_caching' },
  { id: 'e5-8', source: 'research', target: 'neo4j' },
  { id: 'e-synth-ans', source: 'synthesis', target: 'user_query_answer', animated: true },
  { id: 'e-pc-ans', source: 'prompt_caching', target: 'user_query_answer', animated: true },
]; 